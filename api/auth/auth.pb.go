// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/auth/auth.proto

package auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PasswordRequest struct {
	Password             *PasswordCredential `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PasswordRequest) Reset()         { *m = PasswordRequest{} }
func (m *PasswordRequest) String() string { return proto.CompactTextString(m) }
func (*PasswordRequest) ProtoMessage()    {}
func (*PasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa33bda803119f75, []int{0}
}

func (m *PasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordRequest.Unmarshal(m, b)
}
func (m *PasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordRequest.Marshal(b, m, deterministic)
}
func (m *PasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordRequest.Merge(m, src)
}
func (m *PasswordRequest) XXX_Size() int {
	return xxx_messageInfo_PasswordRequest.Size(m)
}
func (m *PasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordRequest proto.InternalMessageInfo

func (m *PasswordRequest) GetPassword() *PasswordCredential {
	if m != nil {
		return m.Password
	}
	return nil
}

type PasswordCredential struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordCredential) Reset()         { *m = PasswordCredential{} }
func (m *PasswordCredential) String() string { return proto.CompactTextString(m) }
func (*PasswordCredential) ProtoMessage()    {}
func (*PasswordCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa33bda803119f75, []int{1}
}

func (m *PasswordCredential) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordCredential.Unmarshal(m, b)
}
func (m *PasswordCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordCredential.Marshal(b, m, deterministic)
}
func (m *PasswordCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordCredential.Merge(m, src)
}
func (m *PasswordCredential) XXX_Size() int {
	return xxx_messageInfo_PasswordCredential.Size(m)
}
func (m *PasswordCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordCredential.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordCredential proto.InternalMessageInfo

func (m *PasswordCredential) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PasswordCredential) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type TokenResponse struct {
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken         string   `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresIn            int32    `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa33bda803119f75, []int{2}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *TokenResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *TokenResponse) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func init() {
	proto.RegisterType((*PasswordRequest)(nil), "usr.api.auth.PasswordRequest")
	proto.RegisterType((*PasswordCredential)(nil), "usr.api.auth.PasswordCredential")
	proto.RegisterType((*TokenResponse)(nil), "usr.api.auth.TokenResponse")
}

func init() { proto.RegisterFile("api/auth/auth.proto", fileDescriptor_aa33bda803119f75) }

var fileDescriptor_aa33bda803119f75 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcf, 0x6a, 0xe3, 0x30,
	0x10, 0xc6, 0x71, 0x96, 0x2c, 0x1b, 0xe5, 0x1f, 0xab, 0x0d, 0x4b, 0xf0, 0x26, 0x90, 0x75, 0x58,
	0x08, 0x39, 0xd8, 0x6c, 0xf6, 0x96, 0xed, 0xa5, 0x2d, 0x14, 0x72, 0x69, 0x8b, 0xdb, 0x50, 0xe8,
	0x25, 0x28, 0xce, 0xd4, 0x56, 0xeb, 0x48, 0xaa, 0x24, 0x27, 0x3d, 0xf7, 0x15, 0xfa, 0x68, 0x79,
	0x85, 0x3e, 0x48, 0xb1, 0x6c, 0xa7, 0x09, 0xed, 0xb1, 0xbd, 0x08, 0xfc, 0xcd, 0xa7, 0xef, 0x67,
	0xcd, 0x0c, 0xfa, 0x41, 0x04, 0xf5, 0x48, 0xa2, 0x23, 0x73, 0xb8, 0x42, 0x72, 0xcd, 0x71, 0x2d,
	0x51, 0xd2, 0x25, 0x82, 0xba, 0xa9, 0x66, 0x77, 0x42, 0xce, 0xc3, 0x18, 0x3c, 0xe3, 0x64, 0x8c,
	0x6b, 0xa2, 0x29, 0x67, 0x2a, 0xf3, 0x3a, 0x67, 0xa8, 0x79, 0x4e, 0x94, 0x5a, 0x73, 0xb9, 0xf0,
	0xe1, 0x3e, 0x01, 0xa5, 0xf1, 0x01, 0xfa, 0x26, 0x72, 0xa9, 0x6d, 0xf5, 0xac, 0x41, 0x75, 0xd4,
	0x73, 0x77, 0x13, 0xdd, 0xe2, 0xc2, 0xb1, 0x84, 0x05, 0x30, 0x4d, 0x49, 0xec, 0x6f, 0x6f, 0x38,
	0x27, 0x08, 0xbf, 0xad, 0xe3, 0x16, 0x2a, 0xc3, 0x92, 0xd0, 0xd8, 0x04, 0x56, 0xfc, 0xec, 0x03,
	0xdb, 0x3b, 0xa4, 0x92, 0x29, 0xbc, 0xe6, 0xac, 0x50, 0xfd, 0x92, 0xdf, 0x01, 0xf3, 0x41, 0x09,
	0xce, 0x14, 0xe0, 0xdf, 0xa8, 0x46, 0x82, 0x00, 0x94, 0x9a, 0xe9, 0x54, 0xcf, 0x93, 0xaa, 0x99,
	0x66, 0xac, 0xb8, 0x8f, 0xea, 0x12, 0x6e, 0x24, 0xa8, 0x28, 0xf7, 0x64, 0xa1, 0xb5, 0x5c, 0xcc,
	0x4c, 0x5d, 0x84, 0xe0, 0x41, 0x50, 0x09, 0x6a, 0x46, 0x59, 0xfb, 0x4b, 0xcf, 0x1a, 0x94, 0xfd,
	0x4a, 0xae, 0x4c, 0xd8, 0x68, 0x53, 0x42, 0x8d, 0xc3, 0x44, 0x47, 0xe9, 0x8f, 0x07, 0xa6, 0x55,
	0x38, 0x44, 0xf5, 0x0b, 0x1a, 0xb2, 0x44, 0x9c, 0xc2, 0x7a, 0xaa, 0x40, 0xe2, 0xee, 0xfb, 0xfd,
	0xc8, 0x1b, 0x68, 0xff, 0xda, 0x2f, 0xef, 0x3d, 0xc3, 0xb1, 0x1f, 0x37, 0xcf, 0x4f, 0xa5, 0x96,
	0xd3, 0xf4, 0x56, 0x7f, 0xb3, 0xc9, 0x29, 0x93, 0x3d, 0xb6, 0x86, 0x38, 0x46, 0x38, 0x05, 0x4d,
	0xd8, 0x15, 0xd5, 0x51, 0x91, 0xfa, 0x09, 0x34, 0xca, 0x52, 0xda, 0x2d, 0x6a, 0x4c, 0xc5, 0x82,
	0x68, 0xf8, 0x10, 0x52, 0xc7, 0x90, 0x7e, 0x3a, 0xdf, 0xb7, 0xa4, 0x62, 0x94, 0x63, 0x6b, 0x78,
	0xf4, 0xe7, 0xba, 0x1f, 0x52, 0x1d, 0x25, 0x73, 0x37, 0xe0, 0x4b, 0x2f, 0x88, 0x28, 0x01, 0xe6,
	0x25, 0x4a, 0x7a, 0xc5, 0xfe, 0xfe, 0x4f, 0x8f, 0xf9, 0x57, 0xb3, 0x94, 0xff, 0x5e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x45, 0x6d, 0x20, 0x0b, 0xd7, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticationClient interface {
	SignupNewUser(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	SignInWithPassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	UpdatePassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type authenticationClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationClient(cc *grpc.ClientConn) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) SignupNewUser(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/usr.api.auth.Authentication/SignupNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignInWithPassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/usr.api.auth.Authentication/SignInWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) UpdatePassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/usr.api.auth.Authentication/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
type AuthenticationServer interface {
	SignupNewUser(context.Context, *PasswordRequest) (*TokenResponse, error)
	SignInWithPassword(context.Context, *PasswordRequest) (*TokenResponse, error)
	UpdatePassword(context.Context, *PasswordRequest) (*TokenResponse, error)
}

func RegisterAuthenticationServer(s *grpc.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_SignupNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignupNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.api.auth.Authentication/SignupNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignupNewUser(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignInWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignInWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.api.auth.Authentication/SignInWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignInWithPassword(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.api.auth.Authentication/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).UpdatePassword(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usr.api.auth.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignupNewUser",
			Handler:    _Authentication_SignupNewUser_Handler,
		},
		{
			MethodName: "SignInWithPassword",
			Handler:    _Authentication_SignInWithPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Authentication_UpdatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/auth/auth.proto",
}
